# This workflow will build a Java project with Maven, and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-maven

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: Java CI with Maven

on:
    push:
        branches: ["main"]
    pull_request:
        branches: ["main"]
        paths:
            - "src/main/**"

jobs:
    build:
        runs-on: ubuntu-latest

        services:
            postgres:
                # Docker Hub image
                image: postgres
                env:
                    POSTGRES_USER: username
                    POSTGRES_PASSWORD: password
                    POSTGRES_DB: backend
                # Set health checks to wait until postgres has started
                options: >-
                    --health-cmd pg_isready
                    --health-interval 10s
                    --health-timeout 5s
                    --health-retries 5

        permissions: write-all
        steps:
            - uses: actions/checkout@v3

            - name: Set up Postgresql
              run: docker-compose -f docker-compose.yml up -d

            - name: Set up JDK 19
              uses: actions/setup-java@v3
              with:
                  java-version: "19"
                  distribution: "temurin"
                  cache: maven

            - name: Build with Maven
              run: mvn package --batch-mode -DskipTests=true

            - name: JUnit Test
              run: mvn test --batch-mode -Dspring.profiles.active=test

            - name: JUnit Test Report
              uses: mikepenz/action-junit-report@v3
              if: success() || failure()
              with:
                  report_paths: "**/TEST-*.xml"
